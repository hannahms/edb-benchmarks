---
- hosts: dbt2_driver
  name: Run DBT2
  gather_facts: true

  collections:
    - edb_devops.edb_postgres

  tasks:
    - name: Load servers.yml
      ansible.builtin.include_vars:
        file: "{{ terraform_project_path }}/servers.yml"
        name: infra

    # DBT-2 driver bug workaround.
    - name: Ensure required packages are installed
      ansible.builtin.package:
        name:
        - bind-utils
      become: true

    - name: Get IP address of DBaaS system
      ansible.builtin.command:
        cmd: >-
          dig {{ infra.servers.biganimal.dbt2.public_ip }} +short
      register: address

    - name: Make sure DBT2 target data dir and archive do not exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      become: true
      loop:
        - /tmp/dbt2-data
        - /tmp/dbt2-data.tar.gz

    - name: Calculate drivers per processor
      ansible.builtin.set_fact:
        fpp: "{{ ((dbt2_connections | int) / ansible_processor_nproc) | int  }}"

    # Use dbt2_connections as a limit to the number of connections that may be
    # opened, which are opened in units matching the number of processors on
    # the driver system.  Also target a 45 minute (2,700,000 ms) rampup time,
    # which is the expected time needed for a 10,000 warehouse database to warm
    # up.
    - name: Start dbt2-run-workload
      ansible.builtin.command:
        cmd: >-
          dbt2-run-workload
            -A
            -a pgsql
            -d {{ dbt2_duration }}
            -D {{ infra.servers.biganimal.dbt2.tags.dbname }}
            -F {{ fpp }}
            -H {{ address.stdout_lines[-1] }}
            -n
            -o /tmp/dbt2-data
            -s {{ (2700000 / ((fpp | int) * ansible_processor_nproc)) | int }}
            -t 1
            -u
            -w {{ dbt2_warehouse }}
            -y
            -z "BigAnimal PostgreSQL {{ infra.servers.biganimal.dbt2.all.instance_type }} | {{ infra.servers.biganimal.dbt2.all.storage.0.size }} {{ infra.servers.biganimal.dbt2.all.storage.0.volume_type }} | {{ infra.servers.biganimal.dbt2.all.storage.0.iops }} IOPS | Driver {{ infra.servers.machines.dbt2_driver.instance_type }}"
      environment:
        DRIVER3: "1"
        PGHOST: "{{ address.stdout_lines[-1] }}"
      become: true
      become_user: "{{ pg_owner }}"
      async: 180000
      poll: 60
      changed_when: false
      register: result

    - name: Workload execution output
      ansible.builtin.debug:
        var: result

    # Ignore errors because dbt2-generate-report needs better return code logic.
    - name: Generate DBT2 report
      ansible.builtin.command:
        cmd: >-
          dbt2-generate-report -i /tmp/dbt2-data
      become: true
      become_user: "{{ pg_owner }}"
      changed_when: false
      register: result

    - name: Report generation output
      ansible.builtin.debug:
        var: result

    - name: Create data archive on remote
      ansible.builtin.command:
        cmd: tar cvzf /tmp/dbt2-data.tar.gz -C /tmp/dbt2-data/ .

    - name: Fetch DBT2 data files to localhost
      ansible.builtin.fetch:
        src: "/tmp/dbt2-data.tar.gz"
        dest: "{{ results_directory }}/"
        flat: true

    - name: Extract data contents to localhost results directory
      ansible.builtin.shell:
        cmd: |
          tar xzf "{{ results_directory }}/dbt2-data.tar.gz" -C "{{ results_directory }}"
      delegate_to: localhost
